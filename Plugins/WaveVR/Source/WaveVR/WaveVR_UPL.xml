<?xml version="1.0" encoding="utf-8"?>
<!--WaveVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <init>
        <log text="WaveVR init"/>
        <setBool result="bWaveVRSupported" value="false"/>
        <isArch arch="armeabi-v7a">
            <log text="WaveVR is supported on this build!" />
            <setBool result="bWaveVRSupported" value="true"/>
        </isArch>
    </init>

    <androidManifestUpdates>
        <if condition="bWaveVRSupported">
            <true>
                <loopElements tag="activity">
                    <setStringFromAttribute result="activityName" tag="$" name="android:name"/>
                    <setBoolIsEqual result="bSplashActivity" arg1="$S(activityName)" arg2="com.epicgames.ue4.SplashActivity"/>
                    <if condition="bSplashActivity">
                        <true>
                            <!-- add WVR category to intent-filter when the intent-filter exist -->
                            <setElement result="intentInfo" value="category"/>
                            <addAttribute tag="$intentInfo" name="android:name" value="com.htc.intent.category.VRAPP"/>
                            <addElement tag="intent-filter" name="intentInfo"/>
                            <addAttribute tag="$" name="android:theme" value="@style/Theme.WaveVR.Loading" />
                        </true>
                    </if>
                  <setBoolIsEqual result="bGameActivity" arg1="$S(activityName)" arg2="com.epicgames.ue4.GameActivity"/>
                  <if condition="bGameActivity">
                    <true>
                      <!-- add WVR category to intent-filter when the intent-filter not exist -->
                      <addElements tag="$">
                        <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="com.htc.intent.category.VRAPP" />
                        </intent-filter>
                      </addElements>
                      <addAttribute tag="$" name="android:theme" value="@style/Theme.WaveVR.Loading" />
                    </true>
                  </if>
                </loopElements>
                <addPermission android:name="android.permission.INTERNET" />
                <addPermission android:name="android.permission.ACCESS_NETWORK_STATE" />
                <addPermission android:name="android.permission.READ_EXTERNAL_STORAGE" />
                <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
                <!--Permissions which required for WaveVR SDK.-->
                <addFeature android:name="android.software.vr.mode" />
                <addFeature android:name="android.hardware.vr.high_performance" />
                <!--<addFeature android:name="android.hardware.camera" />-->

                <!-- for PermissionManager remove later -->
                <addPermission android:name="android.permission.CAMERA" />
                <addPermission android:name="android.permission.GET_ACCOUNTS"/>
            </true>
        </if>
    </androidManifestUpdates>

    <prebuildCopies>
		<copyDir src="$S(PluginDir)/java" dst="$S(BuildDir)/src" />
    </prebuildCopies>

    <resourceCopies>
        <isArch arch="armeabi-v7a">
            <!-- If Unreal official publish -->
            <copyFile src="$S(EngineDir)/Source/ThirdParty/WVR/lib/android/wvr_client.aar"
                       dst="$S(BuildDir)/libs/wvr_client.aar" />
            <copyFile src="$S(EngineDir)/Source/ThirdParty/WVR/lib/gradle/build.gradle"
                       dst="$S(BuildDir)/gradle/build.gradle" />
            <copyFile src="$S(EngineDir)/Source/ThirdParty/WVR/lib/gradle/app/build.gradle"
                       dst="$S(BuildDir)/gradle/app/build.gradle" />
        </isArch>
    </resourceCopies>

    <soLoadLibrary>
        <if condition="bWaveVRSupported">
            <true>
                <loadLibrary name="wvr_api" failmsg="libwvr_api.so failed to load!" />
            </true>
        </if>
    </soLoadLibrary>

    <!-- optional additions to the GameActivity imports in GameActivity.java-->
    <gameActivityImportAdditions>
          <insert>
import com.htc.vr.sdk.VR;
import com.htc.vr.sdk.RenderBase;

<!-- for PermissionManager -->
import com.htc.vr.unreal.PermissionManager;
          </insert>
    </gameActivityImportAdditions>
    <!-- optional additions to the GameActivity class in GameActivity.java -->
    <gameActivityClassAdditions>
        <insert>
          private static VR mVR;
          private PermissionManager mPM = null;

          ///@Override
          ///public void setRequestedOrientation(int requestedOrientation) {
          ///    mVR.setRequestedOrientation(requestedOrientation);
          ///}

          @Override
          public void onWindowFocusChanged(boolean hasFocus) {
          mVR.onWindowFocusChanged(hasFocus);
          }

          @Override
          public void onLowMemory() {
          mVR.onLowMemory();
          }

          @Override
          public boolean dispatchKeyEvent(KeyEvent event) {
          return mVR.dispatchKeyEvent(event);
          }

          // Let WVR be identified as GearVR can avoid to modify the UE.
          // The GearVR's render initializtions are necessary for WaveVR.
          public boolean AndroidThunkJava_IsGearVRApplication()
          {
          return true;
          }
        </insert>
      </gameActivityClassAdditions>



      <!-- optional additions to GameActivity onCreate in GameActivity.java-->
    <gameActivityOnCreateAdditions>
        <insert>
            mVR = new VR(Get());
            mVR.setCustomContextSurfaceType(RenderBase.UNREAL_CUSTOM_CONTEXTSURFACE_TYPE);
            mVR.onCreate(savedInstanceState);
            //mVR.setPresentView(MySurfaceView);
			<!--for Permission Manager-->
			mPM = PermissionManager.getInstance();
			mPM.setContext(getApplicationContext());
			mPM.setPackageName(getApplicationContext().getPackageName());
        </insert>
    </gameActivityOnCreateAdditions>

    <!-- optional additions to GameActivity onDestroy in GameActivity.java-->
    <gameActivityOnDestroyAdditions>
        <insert>
            mVR.onDestroy();
        </insert>
    </gameActivityOnDestroyAdditions>

    <!-- optional additions to GameActivity onStart in GameActivity.java-->
    <gameActivityOnStartAdditions>
        <insert>
            mVR.onStart();
        </insert>
    </gameActivityOnStartAdditions>

    <!-- optional additions to GameActivity onStop in GameActivity.java-->
    <gameActivityOnStopAdditions>
        <insert>
            mVR.onStop();
        </insert>
    </gameActivityOnStopAdditions>

    <!-- optional additions to GameActivity onPause in GameActivity.java-->
    <gameActivityOnPauseAdditions>
        <insert>
            mVR.onPause();
            <!--for Permission Manager-->
            mPM.onPauseAndReturnFail();
        </insert>
    </gameActivityOnPauseAdditions>

    <!-- optional additions to GameActivity onResume in GameActivity.java-->
    <gameActivityOnResumeAdditions>
        <insert>
            mVR.onResume();
            <!--for Permission Manager-->
            mPM.onResume();
        </insert>
    </gameActivityOnResumeAdditions>

    <!-- optional additions to GameActivity onActivityResult in GameActivity.java
    <gameActivityOnActivityResultAdditions>
        <insert>
        </insert>
    </gameActivityOnActivityResultAdditions>
    -->
</root>
